### Project Structure
- sample_app: root directory for project
- .gradle: configuration and 
  Gradle files 
- .idea: IDE configuration  
- app: Project source code
- gradle folder: build related data(.gitignore, build.gradle, local properties(sdk path) settings.gradle())
- external libraries: located on app folder (for 3rd part libraries)

### Main Activity Class (.kt)
Activity is no more than each screen, so an app may have multiple activities(screens), and each of those have a layout.
**onCreate** function is ***essential*** on the Main Activity Class

### Gradle
Manages the Android Project through a set of config files.
Each project module has it's own build.gradle file.

### build.gradle file
android: minimum info about project, min OS and OS version, app for compilation.
default config: min OS version, version number, app unique ID
dependencies: here are specified the 3rd party libraries

### Gradle commands
- ./gradlew build: build a project when you are ready to run the application
- ./gradlew clean: delete contents of build dir already generated
- ./gradlew wrapper: allows to see all gradle operations running on background

### Android Manifest file (.xml, app info and permissions)

- Permissions: to allow sms you should add the permission on manifest file (example)
- Application tag: theme of the application(label and icons)  
- Activity tag: all activities of the application are found here
Intent filter: defines the initial point of the running application(configures which is the first screen)

### Resource folder (colors and animations)

- String: references strings  
- Color: (colors.xml) 
- Dimension: (dimens.xml)
- Font: manage fonts you use


### Project file types
The most important project files and their contents include:

 - **build**/
Contains files generated after a project build occurs

-  **libs**/
Contains private and 3rd party libraries used within the app

-  **src**/
Contains all code and resource files for the module in its subdirectories

- **androidTest**/
Contains code for testing features of the app that runs on an emulator or a physical device

- **test**/
Contains code used for unit testing code, with unit tests executed on the computer

- **main**/
Contains the Android code and resources shared by all build variants for testing and production deployments

- **AndroidManifest**.**xml**
Describes specific information about your app and each of its components such as Activity

- **java**/
Contains Java and Kotlin-related code files

- **gen**/
Contains the Java files generated by Android Studio, which are required for the app to build successfully (not displayed in the image above)

- **res**/
Contains application resources, such as image files, layout files for user interface designs, color files, dimension files and UI string for managing texts used across the app

- **assets**/
Contains files that should be compiled into an .apk file as-is (not displayed in the image above)

You can navigate this directory in the same way as a typical file system using URIs and read files as a stream of bytes using the AssetManager. assets/ is a good location for video files, for example.


### Res folder(drawable and mipmap folders)
mipmap ensures high quality renders across multiple devices

### Layout folder (app's UI)
XML isused to specify the UI elements and their layout.
- Design tab
  Pallete's allow to drag and drop elements on each layout.


### Finding assets (URI)
Android recognizes all files saved in the Android Resources Directory as resources and assigns unique IDs to each item. These IDs help android identify a resource whenever a developer needs to reference it.     

Can be image, video or music.
Makes an reference to a file, includes package name, name, and folder(example resource folder)

